import XMonad

import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.InsertPosition

import XMonad.Util.EZConfig
import XMonad.Util.Loggers
import XMonad.Util.Ungrab

import XMonad.Layout.Magnifier
import XMonad.Layout.ThreeColumns
import XMonad.Layout.Spacing

import qualified DBus as D
import qualified DBus.Client as D
import qualified Codec.Binary.UTF8.String as UTF8

main :: IO ()
main = do
    	dbus <- D.connectSession
    	-- Request access to the DBus name
   	D.requestName dbus (D.busName_ "org.xmonad.Log")
       		[D.nameAllowReplacement, D.nameReplaceExisting, D.nameDoNotQueue]

	xmonad $ ewmh $ pagerhints $ myConfig

myConfig = def
	{modMask = mod4Mask
	, layoutHook = spacingWithEdge 5 $  myLayout
	, manageHook = insertPosition End Newer
	, terminal = "alacritty"			-- I dunno what emulator it uses by default, but I hate it
	, workspaces = myWorkspaces
	}
	`additionalKeysP`
	[ ("M-S-s", unGrab *> spawn "scrot -s")		-- Take a screenshot
	, ("M-w", kill)					-- Close windows
	, ("M-r", spawn "dmenu_run")			-- Run dmenu
	]

myLogHook :: D.Client -> PP
myLogHook dbus = def { ppOutput = dbusOutput dbus }

myWorkspaces = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]

myLayout = tiled ||| Mirror tiled ||| Full
	where
		tiled = Tall nmaster delta ratio
		nmaster = 1
		ratio = 2/3
		delta = 3/100

-- Emit a DBus signal on log updates
dbusOutput :: D.Client -> String -> IO ()
dbusOutput dbus str = do
    let signal = (D.signal objectPath interfaceName memberName) {
            D.signalBody = [D.toVariant $ UTF8.decodeString str]
        }
    D.emit dbus signal
  where
    objectPath = D.objectPath_ "/org/xmonad/Log"
    interfaceName = D.interfaceName_ "org.xmonad.Log"
    memberName = D.memberName_ "Update"
